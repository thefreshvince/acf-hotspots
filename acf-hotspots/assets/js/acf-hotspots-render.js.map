{"version":3,"sources":["components/acf/_Hotspot.js","components/acf/input.js"],"names":["HotspotInput","$","getClass","self","context","points","newHeader","parent","getElementsByClassName","string","class_base","HotspotPoint","attributes","_classCallCheck","this","x","y","i","length","point","tinymce_active","class_point","create_inputs","_createClass","key","value","point_events","clone","spot_clone","cloneNode","clone_fields","clone_number","clone_title","l","field_name","getAttribute","replace","setAttribute","inputs","spot_clone_original","parentNode","get_inputs_object","j","wrapper","handle_remove","tinymce","init","selector","id","menubar","statusbar","setup","ed","on","args","el","accordion","setTimeout","loading","classList","add","remove","point_element","document","createElement","style","left","top","main_image","appendChild","_this","undefined","remove_button","e","preventDefault","confirm","addEventListener","removeChild","splice","reposition","containment","scroll","stop","offsetLeft","offsetWidth","offsetTop","offsetHeight","update_position","make_draggable","HotspotItem","$el","get_id","source_image","img_src","generate_spot_clone","classes","match","existing_points","exists","push","original","_this2","change_hotspot_image","_this3","create_hotspot_point","offsetX","offsetY","width","height","from","to","sorted_item","collapsible","header","beforeActivate","event","ui","index","is_loading","init_tinymce","sortable","handle","start","item","beforeStop","sort_points","watch_for_new_image","listen_for_user_clicks","add_exisiting_points","sortabe","jQuery","acf","add_action","get_fields","type","each","postbox"],"mappings":"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","file":"acf-hotspots-render.js","sourcesContent":["/**\n *\n *\tHotspot Class\n *\n */\n\nvar HotspotInput = (function($){\n\n  let class_base = 'acf-hotspot';\n\n  class HotspotPoint {\n\n    /**\n     *  Construct the point\n     */\n    constructor (attributes) {\n      this.class_point    = class_base + '__point';\n      this.x              = attributes.x;\n      this.y              = attributes.y;\n      this.context \t\t\t\t= attributes.context;\n      this.i              = this.context.points.length;\n      this.point          = this.create_point(attributes.x,attributes.y);\n      this.tinymce_active = false;\n\n      if(!attributes.exists) {\n        this.create_inputs(attributes.x,attributes.y);\n      }\n\n      this.point_events();\n\n    }\n\n\n    /**\n     *  Creates the HTML inputs\n     */\n    create_inputs (x,y) {\n      let clone = this.context.spot_clone.cloneNode(true),\n          clone_fields = getClass(class_base + '__input', clone),\n          clone_number = this.i,\n          clone_title = getClass(class_base + '__label', clone)[0];\n\n      for (var i = 0, l = clone_fields.length; i < l; i++) {\n        let field_name = clone_fields[i].getAttribute('data-name').replace('!!N!!', clone_number);\n        clone_fields[i].setAttribute('name', field_name);\n      }\n\n      clone_title.innerHTML = clone_title.innerHTML.replace(/!!N!!/g, clone_number+1);\n\n      getClass(class_base + '__input--x', clone)[0].value = x;\n      getClass(class_base + '__input--y', clone)[0].value = y;\n\n      this.context.spot_clone_original.parentNode.appendChild(clone);\n\n      return this.get_inputs_object(clone);\n    }\n\n\n    /**\n     *  Handles repositioning of point and updating of its values\n     */\n    reposition (i) {\n      let inputs = this.inputs.inputs;\n      this.i = i;\n      this.point.parentNode.appendChild(this.point);\n      for (var j = 0, l = inputs.length; j < l; j++) {\n        inputs[j].setAttribute(\n          'name',\n          inputs[j].getAttribute('name').replace(\n            /points]\\[\\d+\\]\\[/,\n            'points][' + i + ']['\n          )\n        );\n      }\n    }\n\n\n    /**\n     *  Get inputs object\n     */\n    get_inputs_object (wrapper) {\n      this.inputs = {\n        wrapper: wrapper,\n        inputs: getClass(class_base + '__input', wrapper),\n        x: getClass(class_base + '__input--x', wrapper)[0],\n        y: getClass(class_base + '__input--y', wrapper)[0]\n      };\n      this.handle_remove();\n      return this.inputs;\n    }\n\n\n    /**\n     *  Initiates Tinymce\n     */\n    init_tinymce () {\n      if(this.tinymce_active) return;\n      let self = this;\n      tinymce.init({\n        selector: '.' + this.context.id + ' .' + class_base + '__point-fields:nth-child(' + (this.i + 2) + ') .' + class_base + '__input--description',\n        menubar: false,\n        statusbar: false,\n        setup: function (ed) {\n          ed.on('init', function(args) {\n            $( '.acf-hotspot__information', this.el ).accordion( \"refresh\" );\n            setTimeout(\n              () => self.is_loading(false),\n              10\n            )\n          });\n        }\n      });\n      this.tinymce_active = true;\n    }\n\n\n    /**\n     *  Puts the tab into a loading state\n     */\n    is_loading (loading) {\n      let wrapper = this.inputs.wrapper;\n      if(loading){\n        wrapper.classList.add( class_base + '__point-fields--loading' );\n      }else{\n        wrapper.classList.remove( class_base + '__point-fields--loading' );\n      }\n    }\n\n\n    /**\n     *  Creates the point's HTML\n     */\n    create_point (x,y) {\n\n      let point_element = document.createElement('div');\n      point_element.classList.add(this.class_point);\n      point_element.style.left = (x * 100) + '%';\n      point_element.style.top = (y * 100) + '%';\n\n      this.context.main_image.parentNode.appendChild(\n        point_element\n      );\n\n      return point_element;\n\n    }\n\n\n    /**\n     *  Updates the position values in the inputs\n     */\n    update_position(x,y) {\n      this.x = x;\n      this.y = y;\n      this.inputs.x.value = x;\n      this.inputs.y.value = y;\n      this.point.style.left = x*100 + '%';\n      this.point.style.top = y*100 + '%';\n    }\n\n\n    /**\n     *  handles the listener for the remove button\n     */\n    handle_remove() {\n      if(this.inputs.wrapper === undefined) return;\n      let remove_button = getClass('acf-hotspot__delete',this.inputs.wrapper)[0];\n      remove_button.addEventListener(\n        'click',\n        (e) => {\n          e.preventDefault()\n          this.remove()\n        }\n      )\n    }\n\n\n    /**\n     *  Removes this point\n     */\n    remove() {\n      if(confirm('Are you sure you would like to remove point #' + (this.i+1) + '? (this change will only persist if you save/update this post)')) {\n        let points = this.context.points;\n        points.splice(this.i, 1);\n        for (let i = 0, l = points.length; i < l; i++) {\n          points[i].reposition(i);\n        }\n        this.point.parentNode.removeChild(this.point);\n        this.inputs.wrapper.parentNode.removeChild(this.inputs.wrapper);\n        // TODO: Delete this instance\n      }\n    }\n\n\n    /**\n     *  Makes this point draggable on the image\n     */\n    make_draggable () {\n      let self = this,\n          main_image = this.context.main_image;\n      $( this.point ).draggable({\n        containment: 'parent',\n        scroll: false,\n        stop: function(e) {\n          let x = self.point.offsetLeft / main_image.offsetWidth,\n              y = self.point.offsetTop / main_image.offsetHeight;\n          self.update_position(x,y);\n        }\n      });\n    }\n\n\n    /**\n     *  Point Events\n     */\n    point_events () {\n      // this.handle_remove();\n      this.make_draggable();\n    }\n\n  }\n\n  return class HotspotItem {\n\n    /**\n     *  What we need to run the class\n     */\n    constructor ($el) {\n      this.el \t\t\t\t\t  = $el;\n      this.id             = this.get_id();\n      this.source_image   = $('.' + class_base + '__upload .acf-image-uploader .view img', $el);\n      this.img_src        = '';\n      this.main_image     = getClass( class_base + '__image', this.el[0])[0];\n      this.points         = [];\n      this.spot_clone     = this.generate_spot_clone();\n      this.init();\n    }\n\n\n    /**\n     *  Gets the id of the hotspot area\n     */\n    get_id () {\n      let classes = this.el[0].classList;\n      for (let i = 0, l = classes.length; i < l; i++) {\n        if(!classes[i].match(/acf-field-\\d+/g)) continue;\n        return classes[i];\n      }\n    }\n\n\n    /**\n     *  Adds existing points to item\n     */\n    add_exisiting_points() {\n      let existing_points = getClass(class_base + '__point-fields', this.el[0]);\n      for (let i = 0, l = existing_points.length; i < l; i++) {\n        let x = getClass(class_base + '__input--x', existing_points[i])[0].value,\n            y = getClass(class_base + '__input--y', existing_points[i])[0].value,\n            point = new HotspotPoint({\n              x: x,\n              y: y,\n              context: this,\n              exists: true\n            });\n        point.get_inputs_object(existing_points[i]);\n        this.points.push(point);\n      }\n    }\n\n\n    /**\n     *  Generates spot fields clone\n     */\n    generate_spot_clone() {\n      let original = getClass(class_base + '__clone-base', this.el[0])[0],\n          clone = original.cloneNode(true);\n      this.spot_clone_original = original;\n      clone.classList.remove(class_base + '__clone-base');\n      clone.classList.add(class_base + '__point-fields');\n      return clone;\n    }\n\n\n    /**\n     *  Changes the hotspot imagearea to reflect the uploaded image\n     */\n\n    change_hotspot_image() {\n      this.img_src = this.source_image[0].getAttribute('src');\n      this.img_src = this.img_src.replace(/-\\d+x\\d+\\./g,'.');\n      this.main_image.setAttribute('src', this.img_src);\n    }\n\n\n    /**\n     *  Upload Watcher\n     */\n\n    watch_for_new_image() {\n      this.source_image.on(\n        'load error',\n        () => this.change_hotspot_image()\n      );\n    }\n\n\n    /**\n     *  Listen for user clicks on image\n     */\n\n    listen_for_user_clicks() {\n      this.main_image.addEventListener(\n        'click',\n        e => this.create_hotspot_point(e.offsetX,e.offsetY)\n      );\n    }\n\n\n    /**\n     *  Creates a new hotspot\n     */\n\n    create_hotspot_point (x,y) {\n\n      if(!confirm('Are you sure you would like to create a new point?')) return;\n\n      let width = this.main_image.offsetWidth,\n          height = this.main_image.offsetHeight,\n          point = new HotspotPoint({\n            x: x/width,\n            y: y/height,\n            context: this\n          });\n\n      $( '.' + class_base + '__information', this.el ).accordion( \"refresh\" );\n\n      return this.points.push(point);\n\n    }\n\n    /**\n     *  Sorts all references to the given point\n     */\n    sort_points (from, to) {\n      this.points.splice(to, 0, this.points.splice(from, 1)[0]);\n      for (var i = 0, l = this.points.length; i < l; i++) {\n        this.points[i].reposition(i);\n      }\n    }\n\n    /**\n     *  Reorders the point information\n     */\n    sortabe() {\n      let self = this,\n          sorted_item = -1;\n      $( '.' + class_base + '__information', this.el )\n        .accordion({\n          collapsible: true,\n          header: '.' + class_base + '__label',\n          beforeActivate: function( event, ui ) {\n            if(ui.newHeader[0] === undefined) return;\n            if(!self.points[ui.newHeader.parent().index()-1].tinymce_active){\n              self.points[ui.newHeader.parent().index()-1].is_loading(true);\n            }\n            setTimeout(\n              () => self.points[ui.newHeader.parent().index()-1].init_tinymce(),\n              10\n            );\n          }\n        })\n        .sortable({\n          // revert: true,\n          handle: '.' + class_base + '__label',\n          start: function( event, ui ) {\n            sorted_item = ui.item.index();\n          },\n          beforeStop: function( event, ui ) {\n            if(sorted_item !== ui.item.index()) {\n              self.sort_points(sorted_item-1, ui.item.index()-1);\n            }\n            sorted_item = -1;\n          }\n        });\n    }\n\n\n    /**\n     *  Triggers necessary watchers and events\n     */\n\n    init() {\n      this.watch_for_new_image();\n      this.change_hotspot_image();\n      this.listen_for_user_clicks();\n      this.add_exisiting_points();\n      this.sortabe();\n    }\n\n  }\n\n  // Set helper functions:``\n  function getClass(string, context) {\n    if(context === undefined) context = document;\n    return context.getElementsByClassName(string);\n  }\n\n})(jQuery);\n","(function($){\n\n\t/**\n\t *\n\t *\tACF INIT STUFF\n\t *\n\t */\n\n\tif( typeof acf.add_action !== 'undefined' ) {\n\n\t\t/*\n\t\t*  ready append (ACF5)\n\t\t*\n\t\t*  These are 2 events which are fired during the page load\n\t\t*  ready = on page load similar to $(document).ready()\n\t\t*  append = on new DOM elements appended via repeater field\n\t\t*\n\t\t*  @type\tevent\n\t\t*  @date\t20/07/13\n\t\t*\n\t\t*  @param\t$el (jQuery selection) the jQuery element which contains the ACF fields\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\tacf.add_action('ready append', function( $el ){\n\n\t\t\t// search $el for fields of type 'hotspots'\n\t\t\tacf.get_fields({ type : 'hotspots'}, $el)\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t} else {\n\n\n\t\t/*\n\t\t*  acf/setup_fields (ACF4)\n\t\t*\n\t\t*  This event is triggered when ACF adds any new elements to the DOM.\n\t\t*\n\t\t*  @type\tfunction\n\t\t*  @since\t1.0.0\n\t\t*  @date\t01/01/12\n\t\t*\n\t\t*  @param\tevent\t\te: an event object. This can be ignored\n\t\t*  @param\tElement\t\tpostbox: An element which contains the new HTML\n\t\t*\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\t$(document).on('acf/setup_fields', function(e, postbox){\n\n\t\t\t$(postbox).find('.field[data-field_type=\"hotspots\"]')\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t}\n\n\n})(jQuery);\n"]}