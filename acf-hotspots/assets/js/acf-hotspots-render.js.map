{"version":3,"sources":["components/acf/_Hotspot.js","components/acf/input.js"],"names":["HotspotInput","$","getClass","string","context","start","undefined","handle","class_base","document","getElementsByClassName","HotspotPoint","attributes","_classCallCheck","this","x","y","i","points","length","point","exists","class_point","_createClass","key","value","clone","point_events","spot_clone","cloneNode","clone_fields","clone_number","clone_title","l","field_name","getAttribute","replace","setAttribute","innerHTML","spot_clone_original","parentNode","appendChild","get_inputs_object","inputs","j","wrapper","point_element","createElement","classList","add","style","left","top","main_image","insertBefore","self","draggable","containment","scroll","stop","e","offsetLeft","offsetWidth","offsetTop","offsetHeight","update_position","HotspotItem","$el","el","source_image","img_src","generate_spot_clone","init","existing_points","push","original","remove","on","_this","change_hotspot_image","_this2","create_hotspot_point","offsetX","offsetY","confirm","width","height","from","to","splice","reposition","sorted_item","sortable","event","ui","item","index","beforeStop","sort_points","watch_for_new_image","listen_for_user_clicks","add_exisiting_points","sortabe","acf","add_action","get_fields","type","each","postbox","jQuery"],"mappings":"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","file":"acf-hotspots-render.js","sourcesContent":["/**\n *\n *\tHotspot Class\n *\n */\n\nvar HotspotInput = (function($){\n\n  let class_base = 'acf-hotspot';\n\n  class HotspotPoint {\n\n    /**\n     *  Construct the point\n     */\n    constructor (attributes) {\n      this.class_point    = class_base + '__point';\n      this.x              = attributes.x;\n      this.y              = attributes.y;\n      this.context \t\t\t\t= attributes.context;\n      this.i              = this.context.points.length;\n      this.point          = this.create_point(attributes.x,attributes.y);\n\n      if(!attributes.exists) {\n        this.create_inputs(attributes.x,attributes.y);\n      }\n\n      this.point_events();\n    }\n\n\n    /**\n     *  Creates the HTML inputs\n     */\n    create_inputs (x,y) {\n      let clone = this.context.spot_clone.cloneNode(true),\n          clone_fields = getClass('acf-hotspot__input', clone),\n          clone_number = this.i,\n          clone_title = getClass('acf-hotspot__label', clone)[0];\n\n      for (var i = 0, l = clone_fields.length; i < l; i++) {\n        let field_name = clone_fields[i].getAttribute('data-name').replace('!!N!!', clone_number);\n        clone_fields[i].setAttribute('name', field_name);\n      }\n\n      clone_title.innerHTML = clone_title.innerHTML.replace(/!!N!!/g, clone_number+1);\n\n      getClass(class_base + '__input--x', clone)[0].value = x;\n      getClass(class_base + '__input--y', clone)[0].value = y;\n\n      this.context.spot_clone_original.parentNode.appendChild(clone);\n\n      return get_inputs_object(clone);\n    }\n\n\n    /**\n     *  Handles repositioning of point and updating of its values\n     */\n    reposition (i) {\n      let inputs = this.inputs.inputs;\n      this.i = i;\n      this.point.parentNode.appendChild(this.point);\n      for (var j = 0, l = inputs.length; j < l; j++) {\n        inputs[j].setAttribute(\n          'name',\n          inputs[j].getAttribute('name').replace(\n            /points]\\[\\d+\\]\\[/,\n            'points][' + i + ']['\n          )\n        );\n      }\n    }\n\n\n    /**\n     *  Get inputs object\n     */\n    get_inputs_object (wrapper) {\n      this.inputs = {\n        wrapper: wrapper,\n        inputs: getClass('acf-hotspot__input', wrapper),\n        x: getClass(class_base + '__input--x', wrapper)[0],\n        y: getClass(class_base + '__input--y', wrapper)[0]\n      }\n    }\n\n\n    /**\n     *  Creates the point's HTML\n     */\n    create_point (x,y) {\n\n      let point_element = document.createElement('div');\n      point_element.classList.add(this.class_point);\n      point_element.style.left = (x * 100) + '%';\n      point_element.style.top = (y * 100) + '%';\n\n      this.context.main_image.parentNode.insertBefore(\n        point_element,\n        this.context.main_image\n      );\n\n      return point_element;\n\n    }\n\n\n    /**\n     *  Updates the position values in the inputs\n     */\n    update_position(x,y) {\n      this.x = x;\n      this.y = y;\n      this.inputs.x.value = x;\n      this.inputs.y.value = y;\n      this.point.style.left = x*100 + '%';\n      this.point.style.top = y*100 + '%';\n    }\n\n\n    /**\n     *  Point Events\n     */\n    point_events () {\n      let self = this,\n          main_image = this.context.main_image;\n      $( this.point ).draggable({\n        containment: 'parent',\n        scroll: false,\n        // start: function() {},\n        // drag: function() {},\n        stop: function(e) {\n          let x = self.point.offsetLeft / main_image.offsetWidth,\n              y = self.point.offsetTop / main_image.offsetHeight;\n          self.update_position(x,y);\n        }\n      });\n    }\n\n  }\n\n  return class HotspotItem {\n\n    /**\n     *  What we need to run the class\n     */\n    constructor ($el) {\n      this.el \t\t\t\t\t  = $el;\n      this.source_image   = $('.' + class_base + '__upload .acf-image-uploader .view img', $el);\n      this.img_src        = '';\n      this.main_image     = getClass( class_base + '__image', this.el[0])[0];\n      this.points         = [];\n      this.spot_clone     = this.generate_spot_clone();\n      this.init();\n    }\n\n\n    /**\n     *  Adds existing points to item\n     */\n    add_exisiting_points() {\n      let existing_points = getClass(class_base + '__point-fields', this.el[0]);\n      for (let i = 0, l = existing_points.length; i < l; i++) {\n        let x = getClass(class_base + '__input--x', existing_points[i])[0].value,\n            y = getClass(class_base + '__input--y', existing_points[i])[0].value,\n            point = new HotspotPoint({\n              x: x,\n              y: y,\n              context: this,\n              exists: true\n            });\n        point.get_inputs_object(existing_points[i]);\n        this.points.push(point);\n      }\n    }\n\n\n    /**\n     *  Generates spot fields clone\n     */\n    generate_spot_clone() {\n      let original = getClass(class_base + '__clone-base', this.el[0])[0],\n          clone = original.cloneNode(true);\n      this.spot_clone_original = original;\n      clone.classList.remove(class_base + '__clone-base');\n      clone.classList.add(class_base + '__point-fields');\n      return clone;\n    }\n\n\n    /**\n     *  Changes the hotspot imagearea to reflect the uploaded image\n     */\n\n    change_hotspot_image() {\n      this.img_src = this.source_image[0].getAttribute('src');\n      this.img_src = this.img_src.replace(/-\\d+x\\d+\\./g,'.');\n      this.main_image.setAttribute('src', this.img_src);\n    }\n\n\n    /**\n     *  Upload Watcher\n     */\n\n    watch_for_new_image() {\n      this.source_image.on(\n        'load error',\n        () => this.change_hotspot_image()\n      );\n    }\n\n\n    /**\n     *  Listen for user clicks on image\n     */\n\n    listen_for_user_clicks() {\n      this.main_image.addEventListener(\n        'click',\n        e => this.create_hotspot_point(e.offsetX,e.offsetY)\n      );\n    }\n\n\n    /**\n     *  Creates a new hotspot\n     */\n\n    create_hotspot_point (x,y) {\n\n      if(!confirm('Are you sure you would like to create a new point?')) return;\n\n      let width = this.main_image.offsetWidth,\n          height = this.main_image.offsetHeight,\n          point = new HotspotPoint({\n            x: x/width,\n            y: y/height,\n            context: this\n          });\n\n      return this.points.push(point);\n\n    }\n\n\n    /**\n     *  Sorts all references to the given point\n     */\n    sort_points (from, to) {\n      this.points.splice(to, 0, this.points.splice(from, 1)[0]);\n      for (var i = 0, l = this.points.length; i < l; i++) {\n        this.points[i].reposition(i);\n      }\n    }\n\n    /**\n     *  Reorders the point information\n     */\n    sortabe() {\n      let self = this,\n          sorted_item = -1;\n      $( '.' + class_base + '__information' ).sortable({\n        // revert: true,\n        handle: '.' + class_base + '__label',\n        start: function( event, ui ) {\n          sorted_item = ui.item.index();\n        },\n        beforeStop: function( event, ui ) {\n          if(sorted_item !== ui.item.index()) {\n            self.sort_points(sorted_item-1, ui.item.index()-1);\n          }\n          sorted_item = -1;\n        }\n      });\n    }\n\n\n    /**\n     *  Triggers necessary watchers and events\n     */\n\n    init() {\n      this.watch_for_new_image();\n      this.change_hotspot_image();\n      this.listen_for_user_clicks();\n      this.add_exisiting_points();\n      this.sortabe();\n    }\n\n  }\n\n  // Set helper functions:``\n  function getClass(string, context) {\n    if(context === undefined) context = document;\n    return context.getElementsByClassName(string);\n  }\n\n})(jQuery);\n","(function($){\n\n\t/**\n\t *\n\t *\tACF INIT STUFF\n\t *\n\t */\n\n\tif( typeof acf.add_action !== 'undefined' ) {\n\n\t\t/*\n\t\t*  ready append (ACF5)\n\t\t*\n\t\t*  These are 2 events which are fired during the page load\n\t\t*  ready = on page load similar to $(document).ready()\n\t\t*  append = on new DOM elements appended via repeater field\n\t\t*\n\t\t*  @type\tevent\n\t\t*  @date\t20/07/13\n\t\t*\n\t\t*  @param\t$el (jQuery selection) the jQuery element which contains the ACF fields\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\tacf.add_action('ready append', function( $el ){\n\n\t\t\t// search $el for fields of type 'hotspots'\n\t\t\tacf.get_fields({ type : 'hotspots'}, $el)\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t} else {\n\n\n\t\t/*\n\t\t*  acf/setup_fields (ACF4)\n\t\t*\n\t\t*  This event is triggered when ACF adds any new elements to the DOM.\n\t\t*\n\t\t*  @type\tfunction\n\t\t*  @since\t1.0.0\n\t\t*  @date\t01/01/12\n\t\t*\n\t\t*  @param\tevent\t\te: an event object. This can be ignored\n\t\t*  @param\tElement\t\tpostbox: An element which contains the new HTML\n\t\t*\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\t$(document).on('acf/setup_fields', function(e, postbox){\n\n\t\t\t$(postbox).find('.field[data-field_type=\"hotspots\"]')\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t}\n\n\n})(jQuery);\n"]}