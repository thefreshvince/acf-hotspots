{"version":3,"sources":["components/acf/_Hotspot.js","components/acf/input.js"],"names":["HotspotInput","$","create","string","context","accordion_ready","self","document","getElementsByClassName","class_base","HotspotPoint","attributes","_classCallCheck","this","x","y","i","points","length","point","tinymce_active","class_point","create_inputs","_createClass","key","value","point_events","clone","spot_clone","cloneNode","clone_fields","getClass","clone_number","clone_title","l","field_name","getAttribute","replace","setAttribute","inputs","get_inputs_object","refresh_accordion","_this","setTimeout","accordion","parentNode","j","wrapper","handle_remove","tinymce","init","selector","id","menubar","statusbar","height","setup","ed","on","args","is_loading","loading","classList","add","remove","point_element","createElement","style","left","main_image","appendChild","top","_this2","undefined","remove_button","addEventListener","e","preventDefault","confirm","splice","removeChild","containment","stop","offsetTop","offsetHeight","update_position","make_draggable","HotspotItem","$el","el","get_id","source_image","img_src","generate_spot_clone","classes","match","existing_points","exists","push","original","removeAttribute","spot_clone_original","_this3","change_hotspot_image","_this4","create_hotspot_point","offsetX","offsetY","width","offsetWidth","from","to","reposition","sorted_item","collapsible","header","beforeActivate","ui","newHeader","parent","index","panel","init_tinymce","sortable","handle","start","event","item","beforeStop","sort_points","watch_for_new_image","listen_for_user_clicks","add_exisiting_points","acf","add_action","get_fields","type","each","postbox","jQuery"],"mappings":"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","file":"acf-hotspots-render.js","sourcesContent":["/**\n *\n *\tHotspot Class\n *\n */\n\nvar HotspotInput = (function($){\n\n  let class_base = 'acf-hotspot';\n\n  class HotspotPoint {\n\n    /**\n     *  Construct the point\n     */\n    constructor (attributes) {\n      this.class_point    = class_base + '__point';\n      this.x              = attributes.x;\n      this.y              = attributes.y;\n      this.context \t\t\t\t= attributes.context;\n      this.i              = this.context.points.length;\n      this.point          = this.create_point(attributes.x,attributes.y);\n      this.tinymce_active = false;\n\n      if(!attributes.exists) {\n        this.create_inputs(attributes.x,attributes.y);\n      }\n\n      this.point_events();\n\n    }\n\n\n    /**\n     *  Creates the HTML inputs\n     */\n    create_inputs (x,y) {\n      let clone = this.context.spot_clone.cloneNode(true),\n          clone_fields = getClass(class_base + '__input', clone),\n          clone_number = this.i,\n          clone_title = getClass(class_base + '__label', clone)[0];\n\n      for (var i = 0, l = clone_fields.length; i < l; i++) {\n        let field_name = clone_fields[i].getAttribute('data-name').replace('!!N!!', clone_number);\n        clone_fields[i].setAttribute('name', field_name);\n      }\n\n      clone_title.innerHTML = clone_title.innerHTML.replace(/!!N!!/g, clone_number+1);\n\n      getClass(class_base + '__input--x', clone)[0].value = x;\n      getClass(class_base + '__input--y', clone)[0].value = y;\n\n      this.context.spot_clone_original.parentNode.appendChild(clone);\n\n      return this.get_inputs_object(clone);\n    }\n\n\n    /**\n     *  Has a tinymce\n     */\n    has_a_tinymce () {\n      if(\n        !this.tinymce_active &&\n        this.inputs.wrapper.getElementsByClassName('mce-tinymce').length > 0\n      ) {\n        this.tinymce_active = true;\n        this.refresh_accordion();\n        return true;\n      }\n      return false;\n    }\n\n\n    /**\n     *  Refreshes the accordion\n     */\n    refresh_accordion () {\n      if(this.context.accordion_ready) {\n        setTimeout(\n          () => this.context.accordion.accordion( \"refresh\" ),\n          10\n        );\n      }\n    }\n\n\n    /**\n     *  Handles repositioning of point and updating of its values\n     */\n    reposition (i) {\n      let inputs = this.inputs.inputs;\n      this.i = i;\n      this.point.parentNode.appendChild(this.point);\n      for (var j = 0, l = inputs.length; j < l; j++) {\n        inputs[j].setAttribute(\n          'name',\n          inputs[j].getAttribute('name').replace(\n            /points]\\[\\d+\\]\\[/,\n            'points][' + i + ']['\n          )\n        );\n      }\n    }\n\n\n    /**\n     *  Get inputs object\n     */\n    get_inputs_object (wrapper) {\n      this.inputs = {\n        wrapper: wrapper,\n        inputs: getClass(class_base + '__input', wrapper),\n        x: getClass(class_base + '__input--x', wrapper)[0],\n        y: getClass(class_base + '__input--y', wrapper)[0]\n      };\n      this.handle_remove();\n      return this.inputs;\n    }\n\n\n    /**\n     *  Initiates Tinymce\n     */\n    init_tinymce () {\n      if(this.tinymce_active) return;\n      let self = this;\n      tinymce.init({\n        selector: '.' + this.context.id + ' .' + class_base + '__point-fields:nth-child(' + (this.i + 2) + ') .' + class_base + '__input--description',\n        menubar: false,\n        statusbar: false,\n        height: 300,\n        setup: function (ed) {\n          ed.on('init', function(args) {\n            self.refresh_accordion();\n            setTimeout(\n              () => self.is_loading(false),\n              10\n            )\n          });\n        }\n      });\n      this.tinymce_active = true;\n    }\n\n\n    /**\n     *  Puts the tab into a loading state\n     */\n    is_loading (loading) {\n      let wrapper = this.inputs.wrapper;\n      if(loading){\n        wrapper.classList.add( class_base + '__point-fields--loading' );\n      }else{\n        wrapper.classList.remove( class_base + '__point-fields--loading' );\n      }\n    }\n\n\n    /**\n     *  Creates the point's HTML\n     */\n    create_point (x,y) {\n\n      let point_element = document.createElement('div');\n      point_element.classList.add(this.class_point);\n      point_element.style.left = (x * 100) + '%';\n      point_element.style.top = (y * 100) + '%';\n\n      this.context.main_image.parentNode.appendChild(\n        point_element\n      );\n\n      return point_element;\n\n    }\n\n\n    /**\n     *  Updates the position values in the inputs\n     */\n    update_position(x,y) {\n      this.x = x;\n      this.y = y;\n      this.inputs.x.value = x;\n      this.inputs.y.value = y;\n      this.point.style.left = x*100 + '%';\n      this.point.style.top = y*100 + '%';\n    }\n\n\n    /**\n     *  handles the listener for the remove button\n     */\n    handle_remove() {\n      if(this.inputs.wrapper === undefined) return;\n      let remove_button = getClass('acf-hotspot__delete',this.inputs.wrapper)[0];\n      remove_button.addEventListener(\n        'click',\n        (e) => {\n          e.preventDefault()\n          this.remove()\n        }\n      )\n    }\n\n\n    /**\n     *  Removes this point\n     */\n    remove() {\n      if(confirm('Are you sure you would like to remove point #' + (this.i+1) + '? (this change will only persist if you save/update this post)')) {\n        let points = this.context.points;\n        points.splice(this.i, 1);\n        for (let i = 0, l = points.length; i < l; i++) {\n          points[i].reposition(i);\n        }\n        this.point.parentNode.removeChild(this.point);\n        this.inputs.wrapper.parentNode.removeChild(this.inputs.wrapper);\n        // TODO: Delete this instance\n      }\n    }\n\n\n    /**\n     *  Makes this point draggable on the image\n     */\n    make_draggable () {\n      let self = this,\n          main_image = this.context.main_image;\n      $( this.point ).draggable({\n        containment: 'parent',\n        scroll: false,\n        stop: function(e) {\n          let x = self.point.offsetLeft / main_image.offsetWidth,\n              y = self.point.offsetTop / main_image.offsetHeight;\n          self.update_position(x,y);\n        }\n      });\n    }\n\n\n    /**\n     *  Point Events\n     */\n    point_events () {\n      // this.handle_remove();\n      this.make_draggable();\n    }\n\n  }\n\n  return class HotspotItem {\n\n    /**\n     *  What we need to run the class\n     */\n    constructor ($el) {\n      this.el               = $el;\n      this.id               = this.get_id();\n      this.source_image     = $('.' + class_base + '__upload .acf-image-uploader .view img', $el);\n      this.img_src          = '';\n      this.main_image       = getClass( class_base + '__image', this.el[0])[0];\n      this.points           = [];\n      this.spot_clone       = this.generate_spot_clone();\n      this.accordion_ready  = false;\n      this.accordion        = $( '.' + class_base + '__information', this.el );\n      this.init();\n    }\n\n\n    /**\n     *  Gets the id of the hotspot area\n     */\n    get_id () {\n      let classes = this.el[0].classList;\n      for (let i = 0, l = classes.length; i < l; i++) {\n        if(!classes[i].match(/acf-field-\\d+/g)) continue;\n        return classes[i];\n      }\n    }\n\n\n    /**\n     *  Adds existing points to item\n     */\n    add_exisiting_points() {\n      let existing_points = getClass(class_base + '__point-fields', this.el[0]);\n      for (let i = 0, l = existing_points.length; i < l; i++) {\n        let x = getClass(class_base + '__input--x', existing_points[i])[0].value,\n            y = getClass(class_base + '__input--y', existing_points[i])[0].value,\n            point = new HotspotPoint({\n              x: x,\n              y: y,\n              context: this,\n              exists: true\n            });\n        point.get_inputs_object(existing_points[i]);\n        this.points.push(point);\n      }\n    }\n\n\n    /**\n     *  Generates spot fields clone\n     */\n    generate_spot_clone() {\n      let original = getClass(class_base + '__clone-base', this.el[0])[0],\n          inputs = getClass(class_base + '__input', original),\n          clone = null;\n\n      for (var i = 0, l = inputs.length; i < l; i++) {\n        inputs[i].setAttribute(\n          'data-name',\n          inputs[i].getAttribute('name')\n        );\n        inputs[i].removeAttribute('name');\n      }\n\n      clone = original.cloneNode(true);\n      this.spot_clone_original = original;\n      clone.classList.remove(class_base + '__clone-base');\n      clone.classList.add(class_base + '__point-fields');\n      return clone;\n    }\n\n\n    /**\n     *  Changes the hotspot imagearea to reflect the uploaded image\n     */\n\n    change_hotspot_image() {\n      this.img_src = this.source_image[0].getAttribute('src');\n      this.img_src = this.img_src.replace(/-\\d+x\\d+\\./g,'.');\n      this.main_image.setAttribute('src', this.img_src);\n    }\n\n\n    /**\n     *  Upload Watcher\n     */\n\n    watch_for_new_image() {\n      this.source_image.on(\n        'load error',\n        () => this.change_hotspot_image()\n      );\n    }\n\n\n    /**\n     *  Listen for user clicks on image\n     */\n\n    listen_for_user_clicks() {\n      this.main_image.addEventListener(\n        'click',\n        e => this.create_hotspot_point(e.offsetX,e.offsetY)\n      );\n    }\n\n\n    /**\n     *  Creates a new hotspot\n     */\n\n    create_hotspot_point (x,y) {\n\n      if(!confirm('Are you sure you would like to create a new point?')) return;\n\n      let width = this.main_image.offsetWidth,\n          height = this.main_image.offsetHeight,\n          point = new HotspotPoint({\n            x: x/width,\n            y: y/height,\n            context: this\n          });\n\n      if (this.accordion_ready) {\n        this.accordion.accordion( \"refresh\" );\n      }\n\n      return this.points.push(point);\n\n    }\n\n    /**\n     *  Sorts all references to the given point\n     */\n    sort_points (from, to) {\n      this.points.splice(to, 0, this.points.splice(from, 1)[0]);\n      for (var i = 0, l = this.points.length; i < l; i++) {\n        this.points[i].reposition(i);\n      }\n    }\n\n    /**\n     *  Reorders the point information\n     */\n    sortabe() {\n      let self = this,\n          sorted_item = -1;\n      this.accordion\n        .accordion({\n          collapsible: true,\n          header: '.' + class_base + '__label',\n          beforeActivate: function ( event, ui ) {\n            if(ui.newHeader[0] === undefined) return;\n            let panel = self.points[ui.newHeader.parent().index()-1];\n\n            // TODO: Really need to find a fix for this...\n            // sometimes the accordion doesn't expand to the\n            // height of its contents\n            self.accordion.accordion( \"refresh\" );\n\n            if(\n              !panel.tinymce_active &&\n              !panel.has_a_tinymce()\n            ){\n              panel.is_loading(true);\n            }\n            setTimeout(\n              () => panel.init_tinymce(),\n              10\n            );\n          },\n          create: function () {\n            self.accordion_ready = true;\n          }\n        })\n        .sortable({\n          // revert: true,\n          handle: '.' + class_base + '__label',\n          start: function( event, ui ) {\n            sorted_item = ui.item.index();\n          },\n          beforeStop: function( event, ui ) {\n            if(sorted_item !== ui.item.index()) {\n              self.sort_points(sorted_item-1, ui.item.index()-1);\n            }\n            sorted_item = -1;\n          }\n        });\n    }\n\n\n    /**\n     *  Triggers necessary watchers and events\n     */\n\n    init() {\n      this.watch_for_new_image();\n      this.change_hotspot_image();\n      this.listen_for_user_clicks();\n      this.add_exisiting_points();\n      this.sortabe();\n    }\n\n  }\n\n  // Set helper functions:``\n  function getClass(string, context) {\n    if(context === undefined) context = document;\n    return context.getElementsByClassName(string);\n  }\n\n})(jQuery);\n","(function($){\n\n\t/**\n\t *\n\t *\tACF INIT STUFF\n\t *\n\t */\n\n\tif( typeof acf.add_action !== 'undefined' ) {\n\n\t\t/*\n\t\t*  ready append (ACF5)\n\t\t*\n\t\t*  These are 2 events which are fired during the page load\n\t\t*  ready = on page load similar to $(document).ready()\n\t\t*  append = on new DOM elements appended via repeater field\n\t\t*\n\t\t*  @type\tevent\n\t\t*  @date\t20/07/13\n\t\t*\n\t\t*  @param\t$el (jQuery selection) the jQuery element which contains the ACF fields\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\tacf.add_action('ready append', function( $el ){\n\n\t\t\t// search $el for fields of type 'hotspots'\n\t\t\tacf.get_fields({ type : 'hotspots'}, $el)\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t} else {\n\n\n\t\t/*\n\t\t*  acf/setup_fields (ACF4)\n\t\t*\n\t\t*  This event is triggered when ACF adds any new elements to the DOM.\n\t\t*\n\t\t*  @type\tfunction\n\t\t*  @since\t1.0.0\n\t\t*  @date\t01/01/12\n\t\t*\n\t\t*  @param\tevent\t\te: an event object. This can be ignored\n\t\t*  @param\tElement\t\tpostbox: An element which contains the new HTML\n\t\t*\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\t$(document).on('acf/setup_fields', function(e, postbox){\n\n\t\t\t$(postbox).find('.field[data-field_type=\"hotspots\"]')\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t}\n\n\n})(jQuery);\n"]}