{"version":3,"sources":["components/acf/_Hotspot.js","components/acf/input.js"],"names":["HotspotInput","$","class_base","HotspotPoint","attributes","_classCallCheck","this","x","y","context","i","points","length","point","exists","class_point","_createClass","key","value","clone","spot_clone","cloneNode","clone_fields","getElementsByClassName","clone_number","clone_title","l","field_name","getAttribute","replace","setAttribute","innerHTML","spot_clone_original","parentNode","appendChild","point_element","point_number","document","createTextNode","classList","add","style","left","top","main_image","insertBefore","HotspotItem","$el","el","source_image","img_src","generate_spot_clone","init","existing_points","original","remove","_this","on","change_hotspot_image","_this2","addEventListener","e","create_hotspot_point","offsetX","offsetY","confirm","width","offsetWidth","height","offsetHeight","push","watch_for_new_image","listen_for_user_clicks","add_exisiting_points","acf","add_action","get_fields","type","each","postbox","jQuery"],"mappings":"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","file":"acf-hotspots-render.js","sourcesContent":["/**\n *\n *\tHotspot Class\n *\n */\n\nvar HotspotInput = (function($){\n\n  let class_base = 'acf-hotspot';\n\n  class HotspotPoint {\n\n    /**\n     *  Construct the point\n     */\n    constructor (attributes) {\n      this.class_point    = class_base + '__point';\n      this.x              = attributes.x;\n      this.y              = attributes.y;\n      this.context \t\t\t\t= attributes.context;\n      this.i              = this.context.points.length;\n      this.point          = this.create_point(attributes.x,attributes.y);\n\n      if(!attributes.exists) {\n        this.inputs       = this.create_inputs(attributes.x,attributes.y);\n      }\n    }\n\n\n    /**\n     *  Creates the HTML inputs\n     */\n    create_inputs (x,y) {\n      let clone = this.context.spot_clone.cloneNode(true),\n          clone_fields = clone.getElementsByClassName('acf-hotspot__input'),\n          clone_number = this.i,\n          clone_title = clone.getElementsByClassName('acf-hotspot__label')[0];\n\n      for (var i = 0, l = clone_fields.length; i < l; i++) {\n        let field_name = clone_fields[i].getAttribute('data-name').replace('!!N!!', clone_number);\n        clone_fields[i].setAttribute('name', field_name);\n      }\n\n      clone_title.innerHTML = clone_title.innerHTML.replace(/!!N!!/g, clone_number+1);\n\n      clone.getElementsByClassName(class_base + '__input--x')[0].value = x;\n      clone.getElementsByClassName(class_base + '__input--y')[0].value = y;\n\n      this.context.spot_clone_original.parentNode.appendChild(clone);\n\n      return clone;\n    }\n\n\n    /**\n     *  Creates the point's HTML\n     */\n    create_point (x,y) {\n\n      let point_element = document.createElement('div'),\n          point_number = document.createTextNode(this.i+1);\n      point_element.classList.add(this.class_point);\n      point_element.style.left = (x * 100) + '%';\n      point_element.style.top = (y * 100) + '%';\n      point_element.appendChild(point_number);\n\n      this.context.main_image.parentNode.insertBefore(\n        point_element,\n        this.context.main_image\n      );\n\n      return point_element;\n\n    }\n\n  }\n\n  return class HotspotItem {\n\n    /**\n     *  What we need to run the class\n     */\n    constructor ($el) {\n      this.el \t\t\t\t\t  = $el;\n      this.source_image   = $('.' + class_base + '__upload .acf-image-uploader .view img', $el);\n      this.img_src        = '';\n      this.main_image     = this.el[0].getElementsByClassName( class_base + '__image')[0];\n      this.points         = [];\n      this.spot_clone     = this.generate_spot_clone();\n      this.init();\n    }\n\n\n    /**\n     *  Adds existing points to item\n     */\n    add_exisiting_points() {\n      let existing_points = document.getElementsByClassName(class_base + '__point-fields');\n      for (var i = 0, l = existing_points.length; i < l; i++) {\n        let x = existing_points[i].getElementsByClassName(class_base + '__input--x')[0].value,\n            y = existing_points[i].getElementsByClassName(class_base + '__input--y')[0].value;\n        this.points.push(new HotspotPoint({\n          x: x,\n          y: y,\n          context: this,\n          exists: true\n        }));\n      }\n    }\n\n\n    /**\n     *  Generates spot fields clone\n     */\n    generate_spot_clone() {\n      let original = this.el[0].getElementsByClassName(class_base + '__clone-base')[0],\n          clone = original.cloneNode(true);\n      this.spot_clone_original = original;\n      clone.classList.remove(class_base + '__clone-base');\n      clone.classList.add(class_base + '__point-fields');\n      return clone;\n    }\n\n\n    /**\n     *  Changes the hotspot imagearea to reflect the uploaded image\n     */\n\n    change_hotspot_image() {\n      this.img_src = this.source_image[0].getAttribute('src');\n      this.img_src = this.img_src.replace(/-\\d+x\\d+\\./g,'.');\n      this.main_image.setAttribute('src', this.img_src);\n    }\n\n\n    /**\n     *  Upload Watcher\n     */\n\n    watch_for_new_image() {\n      this.source_image.on(\n        'load error',\n        () => this.change_hotspot_image()\n      );\n    }\n\n\n    /**\n     *  Listen for user clicks on image\n     */\n\n    listen_for_user_clicks() {\n      this.main_image.addEventListener(\n        'click',\n        e => this.create_hotspot_point(e.offsetX,e.offsetY)\n      );\n    }\n\n\n    /**\n     *  Creates a new hotspot\n     */\n\n    create_hotspot_point (x,y) {\n\n      if(!confirm('Are you sure you would like to create a new point?')) return;\n\n      let width = this.main_image.offsetWidth,\n          height = this.main_image.offsetHeight,\n          point = new HotspotPoint({\n            x: x/width,\n            y: y/height,\n            context: this\n          });\n\n      return this.points.push(point);\n\n    }\n\n\n    /**\n     *  Triggers necessary watchers and events\n     */\n\n    init() {\n      this.watch_for_new_image();\n      this.change_hotspot_image();\n      this.listen_for_user_clicks();\n      this.add_exisiting_points();\n    }\n\n  }\n\n  // return Hotspot;\n\n})(jQuery);\n","(function($){\n\n\t/**\n\t *\n\t *\tACF INIT STUFF\n\t *\n\t */\n\n\tif( typeof acf.add_action !== 'undefined' ) {\n\n\t\t/*\n\t\t*  ready append (ACF5)\n\t\t*\n\t\t*  These are 2 events which are fired during the page load\n\t\t*  ready = on page load similar to $(document).ready()\n\t\t*  append = on new DOM elements appended via repeater field\n\t\t*\n\t\t*  @type\tevent\n\t\t*  @date\t20/07/13\n\t\t*\n\t\t*  @param\t$el (jQuery selection) the jQuery element which contains the ACF fields\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\tacf.add_action('ready append', function( $el ){\n\n\t\t\t// search $el for fields of type 'hotspots'\n\t\t\tacf.get_fields({ type : 'hotspots'}, $el)\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t} else {\n\n\n\t\t/*\n\t\t*  acf/setup_fields (ACF4)\n\t\t*\n\t\t*  This event is triggered when ACF adds any new elements to the DOM.\n\t\t*\n\t\t*  @type\tfunction\n\t\t*  @since\t1.0.0\n\t\t*  @date\t01/01/12\n\t\t*\n\t\t*  @param\tevent\t\te: an event object. This can be ignored\n\t\t*  @param\tElement\t\tpostbox: An element which contains the new HTML\n\t\t*\n\t\t*  @return\tn/a\n\t\t*/\n\n\t\t$(document).on('acf/setup_fields', function(e, postbox){\n\n\t\t\t$(postbox).find('.field[data-field_type=\"hotspots\"]')\n\t\t\t\t.each(function() { new HotspotInput( $(this) ) });\n\n\t\t});\n\n\n\t}\n\n\n})(jQuery);\n"]}